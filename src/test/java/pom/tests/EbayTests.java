package pom.tests;import org.openqa.selenium.support.PageFactory;import org.testng.annotations.Test;import pom.tests.page.BasePage;import pom.tests.page.EbayHome;import pom.tests.page.PhoneResult;import pom.tests.page.ShoesResult;import pom.utility.TestNGUtil;public class EbayTests extends TestNGUtil {    /**     * Test to perform a search for "mobile phones" on eBay, filter the results by category,     * apply a brand filter (Apple), and verify results.     *     * @throws InterruptedException if interrupted during the test execution     */    @Test    public void searchMobilePhones() throws InterruptedException {        // Step 1: Initialize the BasePage and navigate to the eBay homepage        // This uses PageFactory to initialize elements on the BasePage.        BasePage basePage = PageFactory.initElements(driver, BasePage.class);        EbayHome ebayHome = basePage.loadUrl("https://www.ebay.com/");        // Step 2: Insert "mobile phones" into the search box        // This action enters the search keyword in the main search field on the eBay homepage.        ebayHome.insertTextToSearchBox("mobile phones");        // Step 3: Select "Cell Phones & Accessories" from the category dropdown        // This selection helps to narrow down the search results to only relevant items.        ebayHome.selectOption("Cell Phones & Accessories");        // Step 4: Click the search button to execute the search        // Clicking the search button triggers the search action, and the resulting items are loaded.        // The page redirects to the PhoneResult page where the results are displayed.        PhoneResult phoneResult = ebayHome.clickSearchButton(PhoneResult.class);        // Step 5: Scroll the results page to load more items        // Scrolling action (down by 500 pixels) allows additional results to load if there are any lazy-loaded elements.        phoneResult.scrollPage(0, 500);        // Step 6: Apply the "Apple" brand filter        // This step selects the "Apple" checkbox to filter results by the Apple brand.        phoneResult.appleCheckBox();        Thread.sleep(1000);        System.out.println();    }    /**     * Test method to search for "Shoes" on eBay, filter the results by category,     * apply a specific brand filter (Adidas), and verify results.     *     * @throws InterruptedException if interrupted during the test execution     */    @Test    public void searchShoes() throws InterruptedException {        // Step 1: Initialize the BasePage and navigate to the eBay homepage        // This uses PageFactory to initialize elements on the BasePage, making WebElements        // on that page available for interaction. Navigating to the homepage is essential        // to start the search flow in the intended location.        BasePage basePage = PageFactory.initElements(driver, BasePage.class);        EbayHome ebayHome = basePage.loadUrl("https://www.ebay.com/");        // Step 2: Insert "Shoes" into the search box        // This action enters the search keyword into the main search field on the eBay homepage.        // "Shoes" is entered to ensure that only relevant items related to footwear are returned in the results.        ebayHome.insertTextToSearchBox("Shoes");        // Step 3: Select "Clothing, Shoes & Accessories" from the category dropdown        // Selecting a specific category helps narrow down the search results to "Clothing, Shoes & Accessories,"        // which is more relevant to the "Shoes" keyword and avoids unrelated search items.        ebayHome.selectOption("Clothing, Shoes & Accessories");        // Step 4: Click the search button to execute the search        // The click action on the search button triggers the search, initiating the query on eBay.        // The action directs the page to the ShoesResult class, where the results are handled.        ShoesResult shoesResult = ebayHome.clickSearchButton(ShoesResult.class);        // Step 5: Scroll the results page to load more items        // Scrolling (down by 500 pixels) allows lazy-loaded items or additional results to load,        // which is essential in some dynamic web applications where results are loaded progressively.        shoesResult.scrollPage(0, 500);        // Step 6: Apply the "Adidas" brand filter        // This step selects the "Adidas" checkbox filter to narrow down the results to Adidas-brand shoes,        // ensuring that only items from this specific brand appear in the search results.        shoesResult.addiDasCheckBox();        // Pause the execution briefly to allow time for filtering and dynamic page updates        // Note: Replace Thread.sleep() with WebDriverWait for a more reliable wait condition.        Thread.sleep(1000);        // Output a confirmation in the console for development tracking        // This is useful for tracking test execution flow during development.        System.out.println("Search for Shoes with Adidas filter applied.");    }//    @Test//    public void loadOdel() throws InterruptedException {//        // load browser and load url//        // get element by xpath : egg: //<tagName>[@<Attribute>=<value>]//        // get element by id : egg: //input[@id="gh-ac"]//        driver.get("https://odel.lk/");//        driver.findElement(By.xpath("//ul[@class='main-menu']/li[3]/a")).click();////        Thread.sleep(1000);//        driver.quit();//        System.out.println();//    }}